'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

const wrapExpressMiddleware = require('use-express-middlewares');

const VERBS = require('./verbs');

function bindVerb(router, verb) {
  return function (pattern) {
    for (var _len = arguments.length, middlewares = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      middlewares[_key - 1] = arguments[_key];
    }

    if (typeof pattern === 'function') {
      middlewares = [pattern].concat(_toConsumableArray(middlewares));
      pattern = '/';
    }
    for (const middleware of middlewares) router[verb](pattern, wrapExpressMiddleware(middleware));
  };
}

module.exports = function bindExpressVerbs(router) {
  const express = {
    use: bindVerb(router, 'use'),
    all: bindVerb(router, 'all')
  };
  VERBS.forEach(verb => {
    express[verb] = bindVerb(router, verb);
  });

  router.express = express;
};